### 设置###
#log4j.rootLogger = debug,stdout,D,E
#控制台使用 标准输出级

#用来定义 log4j 的默认的级别 和输出的位置
log4j.rootLogger = debug,stdout,D,E

### 输出信息到控制抬 ###
log4j.appender.stdout = org.apache.log4j.ConsoleAppender  
log4j.appender.stdout.Target = System.out  
log4j.appender.stdout.layout = org.apache.log4j.PatternLayout  
log4j.appender.stdout.layout.ConversionPattern = [%-5p] %d{yyyy-MM-dd HH:mm:ss,SSS} method:%l%n%m%n  

### 输出DEBUG 级别以上的日志到=D://logs/debug.log   ###
log4j.appender.D = org.apache.log4j.DailyRollingFileAppender  
log4j.appender.D.File =D://logs/info.log  
#日志是否追加
log4j.appender.D.Append = true  
#日志级别
log4j.appender.D.Threshold = info
#日志输出格式
log4j.appender.D.layout = org.apache.log4j.PatternLayout  
log4j.appender.D.layout.ConversionPattern = %-d{yyyy-MM-dd HH:mm:ss}  [ %t:%r ] - [ %p ]  %m%n  

### 输出ERROR 级别以上的日志到=d://logs/error.log ###
log4j.appender.E = org.apache.log4j.DailyRollingFileAppender  
log4j.appender.E.File = d://logs/error.log  
log4j.appender.E.Append = true  
log4j.appender.E.Threshold = ERROR  
log4j.appender.E.layout = org.apache.log4j.PatternLayout  
log4j.appender.E.layout.ConversionPattern = %-d{yyyy-MM-dd HH:mm:ss}  [ %t:%r ] - [ %p ]  %m%n  
BasicConfigurator.configure();



# log4j日志内容解析
#　log4j核心
#　--------------------------------------------------------------------------------
#　1、Logger完成日志信息的处理，可以分成不同的级别记录日志信息，如：debug，info，error
#　--------------------------------------------------------------------------------
#　Logger可以定义输出的层次和决定信息是否输出
#　Logger输出的信息：　ALL,TRACE,DEBUG,INFO,WARN,ERROR,FATAL,OFF------
#　常用的有：DEBUG,INFO,WARN,ERROR
#　--------------------------------------------------------------------------------
#　2、Appender设置日志信息的去向　　如：一个文件中，*.log,*.htm等。或者说是数据库中
#　--------------------------------------------------------------------------------
#　Appender就是设置日志讯息输出到那个地方，可以同时指定多个输出目的地：
#　log4j.rootLogger=debug,appender1,appender2　　　　
#　log4j.appender.appender1=org.apache.log4j.ConsoleAppender
#　log4j.appender.appender2=org.apache.log4j.ConsoleAppender
#　--------------------------------------------------------------------------------
#　3、常用的Appender
#　--------------------------------------------------------------------------------
#　org.apache.log4j.ConsoleAppender（控制台）
#　ogr.apache.log4j.FileAppender(文件)
#　org.apache.log4j.DailyRollingFileAppender（每天产生一个日志文件）
#　org.apache.log4j.RollingFileAppender（文件大小达到指定尺寸的时候产生一个新的文件）
#　org.apache.log4j.WiterAppender（将日志讯息一串流格式发送到任意指定的地方）
#　org.apache.log4j.JDBCAppender（将日志讯息保存到数据库中）
#　org.apache.log4j.SMTPAppender（将日志信息以邮件的方式发送到指定的地方）
#　--------------------------------------------------------------------------------
#　4、Layout设置日志信息的输出样式
#　--------------------------------------------------------------------------------
#　Layout提供的layout的方式：
#　org.apache.log4j.HTMLLayout（一HTML表格形式布局）
#　org.apache.log4j.SimpleLayout（包含日志讯息的级别和讯息字符串）
#　org.apache.log4j.TTCCLayout（包含日志产生时间，执行者，类别等讯息）
#　org.apache.log4j.PatternLayout（可以灵活的指定布局模式）
#　--------------------------------------------------------------------------------
#　org.apache.log4j.PatternLayout（可以灵活的指定布局模式）
#　定制所输出的日志信息的样式：
#　%p   输出优先级别：DEBUG,INFO,WARN,ERROR,FATAL
#　%r   输出字应用启动到输出该日志讯息所耗时秒数
#　%t   输出产生该日志事件的线程名
#　%f　 输出日志讯息所属的类别的类别名
#　%c　 输出日志讯息所属的类的全名
#　%d   输出日志时间点的日期或时间
#　%d   {yyyy-MM-dd HH:mm:ss} 指定日期或时间格式
#　%l　 输出日志时间发生的位置，即输出日志讯息的语句处于他所在的类别的第几行
#　%m 　输出代码中指定的讯息
#　%n　 输出一个换行符号
#　--------------------------------------------------------------------------------